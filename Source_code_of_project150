class LinearSearchVisualizer{
public:
    LinearSearchVisualizer(const vector<int>& data,int target):data(data),target(target),window(sf::VideoMode(800,600),"Linear Search Visualization"),currentIndex(0),found(false){
        window.setFramerateLimit(60);
        rectangleWidth=static_cast<float>(window.getSize().x)/data.size();
    }
    void run(){
        while(window.isOpen()){
            processEvents();
            update();
            render();
        }
    }
private:
    void processEvents(){
        sf::Event event;
        while(window.pollEvent(event)){
            if(event.type==sf::Event::Closed){
                window.close();
            }
        }
    }
    void update(){
        if(!found&&currentIndex<data.size()){
            if(data[currentIndex]==target){
                found=true;
                cout<<"Target found at index: "<<currentIndex<<endl;
            }
            currentIndex++;
        }
        else if(!found&&currentIndex>=data.size()){
            cout<<"Target not found."<<endl;
            window.close();
        }
    }
    void render(){
        window.clear(sf::Color::Black);
        for(size_t i=0;i<data.size();++i){
            sf::RectangleShape rectangle(sf::Vector2f(rectangleWidth-2,data[i]*10));
            rectangle.setPosition(i*rectangleWidth,window.getSize().y-data[i]*10);
            if(i==currentIndex-1&&!found){
                rectangle.setFillColor(sf::Color::Red);
            }
            else if(i==currentIndex-1&&found){
                rectangle.setFillColor(sf::Color::Green);
            }
            else{
                rectangle.setFillColor(sf::Color::White);
            }
            window.draw(rectangle);
            sf::CircleShape arrow(10,3);
            arrow.setRotation(90);
            arrow.setFillColor(sf::Color::Yellow);
            arrow.setPosition(i*rectangleWidth+rectangleWidth/2-10,50);
            window.draw(arrow);
        }
        window.display();
    }
    vector<int> data;
    int target;
    sf::RenderWindow window;
    size_t currentIndex;
    bool found;
    float rectangleWidth;
};
class BinarySearchVisualizer{
public:
    BinarySearchVisualizer(vector<int> data,int target):data(data),target(target),window(sf::VideoMode(800,600),"Binary Search Visualization"),low(0),high(data.size()-1),found(false){
        window.setFramerateLimit(60);
        rectangleWidth=static_cast<float>(window.getSize().x)/data.size();
    }
    void run(){
        while(window.isOpen()){
            processEvents();
            update();
            render();
        }
    }
private:
    void processEvents(){
        sf::Event event;
        while(window.pollEvent(event)){
            if(event.type==sf::Event::Closed){
                window.close();
            }
        }
    }
    void update(){
        if(!found&&low<=high){
            int mid=low+(high-low)/2;
            currentIndex=mid;
            if(data[mid]==target){
                found=true;
                cout<<"Target found at index: "<<mid<<endl;
            }
            else if(data[mid]<target){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        else if(!found&&low>high){
            cout<<"Target not found."<<endl;
            window.close();
        }
    }
    void render(){
        window.clear(sf::Color::Black);
        for(size_t i=0;i<data.size();++i){
            if(i>=low&&i<=high){
                sf::RectangleShape rectangle(sf::Vector2f(rectangleWidth-2,data[i]*10));
                rectangle.setPosition(i*rectangleWidth,window.getSize().y-data[i]*10);
                if(i==currentIndex){
                    rectangle.setFillColor(sf::Color::Red);
                }
                else if(i==currentIndex&&found){
                    rectangle.setFillColor(sf::Color::Green);
                }
                else{
                    rectangle.setFillColor(sf::Color::White);
                }
                window.draw(rectangle);
            }
        }
        window.display();
    }
    vector<int> data;
    int target;
    sf::RenderWindow window;
    int low,high,currentIndex;
    bool found;
    float rectangleWidth;
};
void bubbleSort(vector<int>& arr,sf::RenderWindow& window){
    int n=arr.size();
    bool swapped;
    sf::RectangleShape bar;
    bar.setFillColor(sf::Color::White);
    for(int i=0;i<n-1;++i){
        swapped=false;
        for(int j=0;j<n-i-1;++j){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
                swapped=true;
            }
            window.clear();
            for(int k=0;k<n;++k){
                bar.setSize(sf::Vector2f(10,arr[k]));
                bar.setPosition(k*12,500-arr[k]);
                window.draw(bar);
            }
            window.display();
            this_thread::sleep_for(chrono::milliseconds(300));
        }
        if(!swapped)
            break;
    }
}
int main(){
    int option;
    cout<<"Welcome to come here"<<endl;
    cout<<"What do you want to watch?"<<endl<<"You have three option."<<endl<<"Press 1 to watch Linear Search, Press 2 to watch Binary Search or Press 3 to watch Bubble Sort."<<endl;
    cin>>option;
    if(option==3){
        int numElements;
        cout<<"Enter the number of elements: ";
        cin>>numElements;
        vector<int> arr(numElements);
        cout<<"Enter the elements:\n";
        for(int i=0;i<numElements;++i){
            cin>>arr[i];
        }
        cout<<"The sorted array is here :\n";
        for(int i=0;i<numElements;++i){
            cout<<arr[i]<<" ";
        }
        cout<<endl;
        cout<<"Here every rectangle is drwan according to the user input."<<,endl;
        cout<<"The rectangles in the graph visualize the elements of the array given by the user."<<endl;
        cout<<"The heights of the rectangles are measured according to the elements."<<endl;
        cout<<"The graphics will show how the given elements will be sorted step by step."<<endl;
        sf::RenderWindow window(sf::VideoMode(800,600),"Bubble Sort Visualization");
        bubbleSort(arr,window);
        while(window.isOpen()){
            sf::Event event;
            while(window.pollEvent(event)){
                if(event.type==sf::Event::Closed){
                    window.close();
                }
            }
        }
    }
    else if(option==1){
        int totalNumbers;
        cout<<"Enter the number of elements: ";
        cin>>totalNumbers;
        vector<int> data(totalNumbers);
        cout<<"Enter "<<totalNumbers<<" numbers: ";
        for(int i=0;i<totalNumbers;++i){
            cin>>data[i];
        }
        int target;
        cout<<"Enter the number to search for: ";
        cin>>target;
        LinearSearchVisualizer visualizer(data,target);
        visualizer.run();
        cout<<"Here every rectangle is drwan according to the user input."<<,endl;
        cout<<"The rectangles in the graph visualize the elements of the array given by the user."<<endl;
        cout<<"The heights of the rectangles are measured according to the elements."<<endl;    
    }
    else{
        int totalNumbers;
        cout<<"Enter the number of elements: ";
        cin>>totalNumbers;
        vector<int> data(totalNumbers);
        cout<<"Enter "<<totalNumbers<<" numbers in sorted order: ";
        for(int i=0;i<totalNumbers;++i){
            cin>>data[i];
        }
        int target;
        cout<<"Enter the number to search for: ";
        cin>>target;
        BinarySearchVisualizer visualizer(data,target);
        visualizer.run();
         cout<<"Here every rectangle is drwan according to the user input."<<,endl;
        cout<<"The rectangles in the graph visualize the elements of the array given by the user."<<endl;
        cout<<"The heights of the rectangles are measured according to the elements."<<endl;  
    }
    return 0;
}
